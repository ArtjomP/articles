name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.BuildId)

trigger:
- master

variables:
  PlatformToBuild: 'Any CPU'
  CofigurationToBuild: Release
  ProjectName: 'pt.CommandExecutor.Common'

stages:
- stage: building
  jobs:
  - job: building
    pool:
      vmImage: 'windows-latest'
    steps:
    - bash: |
        set -x
        ver=$(grep "<Version>.*</Version>" $(Build.SourcesDirectory)/command-executor/pt.CommandExecutor/$(ProjectName)/$(ProjectName).csproj | grep -oP "\d\.\d+\.\d+")
        echo "version: $ver"
        ver="${ver}.$(Build.BuildId)"
        if [ "$(Build.SourceBranchName)" != "master" ]; then
          ver="$ver-Beta"
        fi
        echo "version1: $ver"
        sed -i "s|<Version>.*</Version>|<Version>$ver</Version>|g" $(Build.SourcesDirectory)/command-executor/pt.CommandExecutor/$(ProjectName)/$(ProjectName).csproj
        echo "##vso[task.setvariable variable=NugetPackageVersion;isOutput=true]${ver}"
      displayName: 'Update $(PrjectName) version'
      enabled: false
    
    - powershell: |
        $projFile="$(Build.SourcesDirectory)" + "\command-executor\pt.CommandExecutor\$(ProjectName)\$(ProjectName).csproj"
        Write-Host $projFile
        $version=(Select-String -Path $projFile -Pattern "<Version>(\d\.\d+)</Version>").Matches.Groups[1].Value
        $version=$version + ".$(Build.BuildId)"
        $versionNuget=$version
        if ( "$(Build.SourceBranchName)" -ne "master" )
        {
          $versionNuget=$versionNuget + "-Beta"
        }
        $nugetVersionRegex="<Version>.*</Version>"
        $nugetVersion="<Version>$versionNuget</Version>"
        $assemblyVersionRegex="<AssemblyVersion>.*</AssemblyVersion>"
        $assemblyVersion="<AssemblyVersion>$version</AssemblyVersion>"
        $fileVersionRegex="<FileVersion>.*</FileVersion>"
        $fileVersion="<FileVersion>$version</FileVersion>"
        $filecontent = Get-Content($projFile)
        $filecontent -replace $nugetVersionRegex, $nugetVersion -replace $assemblyVersionRegex, $assemblyVersion -replace $fileVersionRegex, $fileVersion | Out-File $projFile utf8
        $filecontent = Get-Content($projFile)
        Write-Host $filecontent
        echo "##vso[task.setvariable variable=NugetPackageVersion;isOutput=true]$versionNuget"
      name: UpdateVersion
      displayName: 'Update $(PrjectName) version'
      
    - task: NuGetToolInstaller@1
    
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '**\command-executor\pt.CommandExecutor\pt.CommandExecutor.sln'

    - task: VSBuild@1
      inputs:
        solution: '**\command-executor\pt.CommandExecutor\pt.CommandExecutor.sln'
        platform: '$(PlatformToBuild)'
        configuration: '$(CofigurationToBuild)'
        
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '**/command-executor/pt.CommandExecutor/*Test*/*.csproj'
        arguments: '--configuration $(CofigurationToBuild) --collect "Code coverage"' 

    - script: dotnet test $(Build.SourcesDirectory)/command-executor/pt.CommandExecutor/pt.CommandExecutor.Common.Test/pt.CommandExecutor.Common.Test.csproj  --logger trx --collect "Code coverage"
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

    - task: CopyPublishBuildArtifacts@1
      inputs:
        Contents: '**/command-executor/**/Release/**/*.nupkg'
        ArtifactName: 'drop'
        ArtifactType: 'Container'

- stage: publishing
  jobs:
  - deployment: nuget
    variables:
    - group: pt-commandexecutor
    environment: nuget-org
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            patterns: '**/command-executor/**/*.nupkg'
            name: DownloadNugetPackage

          - task: NuGetToolInstaller@1

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Set-PSDebug -Trace 1
                $files=(Get-ChildItem -Recurse -Force $(Pipeline.Workspace) -ErrorAction SilentlyContinue | Where-Object { ($_.PSIsContainer -eq $false) -and  ( $_.Name -like "*.nupkg*") })
                foreach ($file in $files)
                {
                    Write-Host $file.FullName
                    $fileFullName=$file.FullName
                    Write-Host $fileFullName
                    dotnet nuget push $fileFullName -k $(nuget.apikey.pt-commandexecutor-common) -s https://api.nuget.org/v3/index.json
                }
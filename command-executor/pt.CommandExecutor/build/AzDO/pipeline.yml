name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.BuildId)

variables:
  PlatformToBuild: 'Any CPU'
  CofigurationToBuild: Release

stages:
- stage: building
  jobs:
  - job: building
    pool:
      vmImage: 'windows-latest'
    steps:
    - powershell: |
        $files=(Get-ChildItem -Recurse -Force $(Build.SourcesDirectory) | Where-Object { ($_.PSIsContainer -eq $false) -and  ( $_.Name -notlike "*Test.csproj*") })
        foreach ($file in $files)
        {
          $projFile = $file.FullName
          Write-Host $projFile
          $version=(Select-String -Path $projFile -Pattern "<Version>(\d\.\d+)</Version>").Matches.Groups[1].Value
          $version=$version + ".$(Build.BuildId)"
          $versionNuget=$version
          if ( "$(Build.SourceBranchName)" -ne "master" )
          {
            $versionNuget=$versionNuget + "-pre"
          }
          $nugetVersionRegex="<Version>.*</Version>"
          $nugetVersion="<Version>$versionNuget</Version>"
          $assemblyVersionRegex="<AssemblyVersion>.*</AssemblyVersion>"
          $assemblyVersion="<AssemblyVersion>$version</AssemblyVersion>"
          $fileVersionRegex="<FileVersion>.*</FileVersion>"
          $fileVersion="<FileVersion>$version</FileVersion>"
          $filecontent = Get-Content($projFile)
          $filecontent -replace $nugetVersionRegex, $nugetVersion -replace $assemblyVersionRegex, $assemblyVersion -replace $fileVersionRegex, $fileVersion | Out-File $projFile utf8
          $filecontent = Get-Content($projFile)
          Write-Host $filecontent
          echo "##vso[task.setvariable variable=NugetPackageVersion;isOutput=true]$versionNuget"
        }
        
      name: UpdateVersion
      displayName: 'Update $(PrjectName) version'
      
    - task: NuGetToolInstaller@1
    
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: '**\command-executor\pt.CommandExecutor\pt.CommandExecutor.sln'

    - task: VSBuild@1
      inputs:
        solution: '**\command-executor\pt.CommandExecutor\pt.CommandExecutor.sln'
        platform: '$(PlatformToBuild)'
        configuration: '$(CofigurationToBuild)'
        
    - script: dotnet test $(Build.SourcesDirectory)/command-executor/pt.CommandExecutor/**/**.Test.csproj  --logger trx --collect "Code coverage"
    
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/command-executor/pt.CommandExecutor/pt.CommandExecutor.Common
        contents: '**/Release/**/*.nupkg' 
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true 

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'drop' 

- stage: publishing
  jobs:
  - deployment: nuget
    variables:
    - group: pt-commandexecutor
    environment: nuget-org
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            patterns: '**/*.nupkg'
            name: DownloadNugetPackage

          - task: NuGetToolInstaller@1

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files=(Get-ChildItem -Recurse -Force $(Pipeline.Workspace) -ErrorAction SilentlyContinue | Where-Object { ($_.PSIsContainer -eq $false) -and  ( $_.Name -like "*.nupkg*") })
                foreach ($file in $files)
                {
                    Write-Host $file.FullName
                    $fileFullName=$file.FullName
                    Write-Host $fileFullName
                    dotnet nuget push $fileFullName -k $(nuget.apikey.pt-commandexecutor-common) -s https://api.nuget.org/v3/index.json
                }